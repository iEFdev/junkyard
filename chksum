#!/usr/bin/env bash
#
# /usr/local/xbin/chksum
#
# Description: Script to check/verify sha and md5.
#
# Version & copy:
_version='0.beta-2';
_date='2015-03-28';   # March 28, 2015 21:08:08  GMT+01:00
_copy='Copyright (c) 2015, Eric F'


# Display a manual like output
function __man()
{
	cat << MAN
CHKSUM                                                                  CHKSUM


NAME
       $_base - Check MD5/SHA* Checksums

SYNOPSIS
       $_base mode checksum file
       $_base [md5|sha|sha1|sha224|sha256|sha384|sha512] [-s] filename
       $_base [-h|-hl|-V]

DESCRIPTION
       $_base :: Check a MD5/SHA checksum against a file in a simular way like
       \`shasum -c\`, but with manual inputs.

MODES
       MD5, SHA*

       * Using \`shasum -a NNN\` (1 (default), 224, 256, 384, 512)

OPTIONS
       --status
       -s     It doesn't output anything. A silent mode (returns true/false)

       --help
       -h     Print out this information. Use -hl or --helpless to get it in a
              separate view. See EXAMPLES.

       --helpless
       -hl    Print out this information using "| less".

       --version
       -V     Print out the version number.

EXAMPLES
       $_base md5 1234567890qwerty1234567890qwerty foo.bar
       $_base sha 1234567890qwerty1234567890qwerty12345678 foo.bar
       $_base sha256 1234567890qwerty...34567890qwerty1234567890qwerty foo.bar

       Status
       $_base md5 -s 1234567890qwerty1234567890qwerty foo.bar

       \$? will return 0 on success and 1 on no match.

       ---

       $_base --help
       $_base -h                    # Showing this file

       $_base --helpless
       $_base -hl                   # Showing this file using (| less).
                                    # Exit with: q

VERSION INFORMATION
       $_base: $_version

COPYRIGHT
       $_copy



                               15 January 2015                          CHKSUM

MAN
}


# Oops
function __err()
{
	[[ $_one != '-h' || $_one != '-hl' ]] && _optline=$(echo -e "\n * :» ${_red}$_base${_def}: No such option. ($_one)");

	cat << ERR
/**$_optline
 * :» Usage:	$_base md5 [-s] checksum file
 * :» Usage:	$_base sha[1|224|256|384|512] [-s] checksum file
 * :» Help:	$_base [-h|-hl]
 */
ERR
	exit 1;
}

function __chk()
{
	if [[ $_sum && $_file ]]; then
		return 0;
	else
		echo -e "$_cyan$_base$_def: WARNING: Missing checksum and/or filename."; exit;
	fi
}


# MD5
function __md5()
{
	_mode=$_one;

	if [[ $_two == '-s' || $_two == '--status' ]]; then
		_sum=$_three;
		_file=$_four;

		# Prevent errmode
		__chk;

		# OS X or Linux
		if [[ `type md5 2>/dev/null` ]]; then _chksum=$(md5 -q $_file);
		elif [[ `type md5sum 2>/dev/null` ]]; then _chksum=$(md5sum $_file | awk '{ print $1 }'); fi

		if [[ $_sum == $_chksum ]]; then true; else false; fi
	else
		_sum=$_two;
		_file=$_three;

		# Prevent errmode
		__chk;

		# OS X or Linux
		if [[ `type md5 2>/dev/null` ]]; then _chksum=$(md5 -q $_file);
		elif [[ `type md5sum 2>/dev/null` ]]; then _chksum=$(md5sum $_file | awk '{ print $1 }'); fi

		# Nice output.
		if [[ $_sum == $_chksum ]]; then 
			echo -e "$_file:\t\t...$_green OK$_def";
		else
			echo -e "$_file:\t\t...$_red FAILED$_def";
			echo -e "\n$_cyan$_base$_def: WARNING: The checksum ($_red$_sum$_def) did NOT match\n";
		fi
	fi
}


# SHA [sha|sha1|sha224|sha256|sha384|sha512]
function __sha()
{
	# Who's who?
	if [[ $_two == '-s' || $_two == '--status' ]]; then
		_sum=$_three;
		_file=$_four;
	else
		_sum=$_two;
		_file=$_three;
	fi

	# Prevent errmode
	__chk;

	# What SHA?
	if [[ $_one == 'sha' || $_one == 'sha1' ]]; then

		# OS X use 'shasum'
		if [[ `type shasum 2>/dev/null` ]]; then
			_chksum=`echo $(shasum $_file) | awk '{ print $1 }'`;
		elif [[ `type sha1sum 2>/dev/null` ]]; then
			_chksum=`echo $(sha1sum $_file) | awk '{ print $1 }'`;
		fi
	else
		_mode=`echo $_one | sed -e 's/^\(sha\)\(.*\)/\-a\ \2\ /g'`;

		# OS X use 'shasum -a NNN'
		if [[ `type shasum 2>/dev/null` ]]; then
			_chksum=`echo $(shasum $_mode $_file) | awk '{ print $1 }'`;
		elif [[ `type ${_mode}sum 2>/dev/null` ]]; then
			_chksum=`echo $(${_mode}sum $_file) | awk '{ print $1 }'`;
		fi
	fi

	# Status. Only return true or false
	if [[ $_two == '-s' || $_two == '--status' ]]; then
		if [[ $_sum == $_chksum ]]; then true; else false; fi
	else
		# Nice output.
		if [[ $_sum == $_chksum ]]; then 
			echo -e "$_file:\t\t...$_green OK$_def";
		else
			echo -e "$_file:\t\t...$_red FAILED$_def";
			echo -e "\n$_cyan$_base$_def: WARNING: The checksum ($_red$_sum$_def) did NOT match\n";
		fi
	fi
}


# Vars
_base=$(basename $0);
_one="$1";
_two="$2";
_three="$3";
_four="$4";


# Colors
_cyan="\033[0;36m";		# cyan = cyan normal color
_green="\033[0;32m";	# green = green color
_red="\033[0;31m";		# red = red color
_def="\033[0m";			# _def = empty color (eg reset)


# Let's do this ...
case $1 in

	# help
	-h|--help)
		__man;
		;;

	# helpless
	-hl|--helpless)
		__man | less;
		;;

	# Version/information
	-V|--version)
		echo "$_base: version $_version, $_copy";
		;;

	# md5 -q
	md5)
		__md5;
		;;

	# shasum
	sha|sha1|sha224|sha256|sha384|sha512)
		__sha;
		;;

	# Oops...
	*)
		__err;
		;;
esac
